---
title: "Estadística Aplicada 3 - Examen 2"
lang: es
author: "Marcelino 191654"
date: todays

format:
  html:
    page-layout: full
    embed-resources: true
    cache: false

---

```{r, echo=FALSE, message=FALSE, warning=FALSE, cache=TRUE}
# cargamos librerias y código principal
library(dplyr)
library(kableExtra)
library(openxlsx)
library(ggplot2)
library(stats)
# Cargamos bases de datos
```

\newpage

# Ejercicio 1

Use la base de percepción humana de colores y ejecute el análisis por escalamiento dimensional. Interprete los resultados usando sus propias palabras.


```{r}
# Cargamos base de datos
data1 <- read.xlsx("color_stimuli.xlsx")
matrix <- 1- as.matrix(data1)
diag1 <- diag(rep(1,14))
matrix <- matrix - diag1
# Clasical scaling
classical <- cmdscale(matrix, k=2, eig=TRUE, add=TRUE)

hexcodes <- c('#2800ff', 
              '#0028ff',
              '#0092ff',
              '#00b2ff',
              '#00ffff',
              '#00ff61',
              '#77ff00',
              '#b3ff00',
              '#fff200',
              '#ffbe00',
              '#ff9b00',
              '#ff5700',
              '#ff0000',
              '#e50000'
              )

# Mapear longitudes de onda a colores 

wavelengths <- c(434, 445, 465, 472, 490, 504, 537, 555, 584, 600, 610, 628, 651, 674)

# Crear un dataframe para ggplot
df <- data.frame(classical$points, Wavelength = wavelengths, Color = hexcodes)

# Crear la gráfica
ggplot(df, aes(x = X1, y = X2, color = Color, label = Wavelength)) +
  geom_point() +
  geom_text(vjust = -1) +
  scale_color_identity() +
  labs(title = "Classical Scaling", x = "Dimension 1", y = "Dimension 2") +
  theme_minimal()

```




# Ejercicio 2

Haga analisis de componentes principales para el archivo turtles.txt. Utilice solamente los datos correspondientes a las tortugas hembras. 

```{r}
# Cargamos base de datos
data2 <- read.xlsx("turtles.xlsx")
turtlesF <- data2 |> 
        filter(sex == 'f ')

turtlesF <- turtlesF |>
        mutate(length = log(length),
               width = log(width),
               height = log(height))

# Media de las variables

summaryTurtlesF <- turtlesF |>
                  summarise(mediaLength = mean(length),
                            mediaWidth = mean(width),
                            mediaHeight = mean(height))

covariance  <-  cov(turtlesF[,c('length', 'width', 'height')])
          
eigenvalues  <- covariance |> eigen()

#PCA
#calculate principal components
resultsF <- prcomp(turtlesF[2:4], scale = TRUE)

biplot(resultsF, scale = 0)

var_explainedF = resultsF$sdev^2 / sum(resultsF$sdev^2)

#create scree plot
qplot(c(1:3), var_explainedF) + 
  geom_line() + 
  xlab("Principal Component") + 
  ylab("Variance Explained") +
  ggtitle("Scree Plot (Female Turtles)") +
  ylim(0, 1)

turtlesF$Volume <- pi/6*exp(turtlesF$length+turtlesF$width+turtlesF$height)

ggplot(turtlesF, aes(x = height, y = Volume, color = sex)) +
  geom_point() +
  labs(title = "Scatter Plot of Female and Male Turtles", 
       x = "X-axis Label(height)", y = "Y-axis Label(Volume)") +
  theme_minimal()

# Transformar variables

pca_scores <- as.matrix(turtlesF[2:4]) %*% resultsF$rotation

# Extract the first principal component (PCA1)
pca2 <- pca_scores[, 1]
# Create a new data frame with only PCA1
df_pca2 <- data.frame(PCA1 = pca2)

df_pca2$Volume <- turtlesF$Volume

plot <- ggplot()+
  geom_point(data=df_pca2, aes(x = PCA1, y = log(Volume)),color="blue") +
  labs(title = "Scatter Plot of Female and Male Turtles", 
       x = "X-axis Label", y = "Y-axis Label") +
  theme_minimal()
print(plot)

reg <- lm(log(Volume) ~ PCA1, data = df_pca2)
summary(reg)
```


